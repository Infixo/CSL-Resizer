//using System.Collections.Generic;
//using System.Reflection.Emit;
using UnityEngine;
//using ColossalFramework;
//using ColossalFramework.Math;
//using ColossalFramework.Plugins;
using HarmonyLib;

namespace Resizer
{
    public static class ResizerPatcher
    {
        private const string HarmonyId = "Infixo.Resizer";
        private static bool patched = false;

        public static void PatchAll()
        {
            if (patched) { Debug.Log($"{HarmonyId} PatchAll: already patched!"); return; }
            //Harmony.DEBUG = true;
            var harmony = new Harmony(HarmonyId);
            harmony.PatchAll();
            if (Harmony.HasAnyPatches(HarmonyId))
            {
                Debug.Log($"{HarmonyId} methods patched OK");
                patched = true;
                var myOriginalMethods = harmony.GetPatchedMethods();
                foreach (var method in myOriginalMethods)
                    Debug.Log($"{HarmonyId} ...method {method.Name}");
            }
            else
                Debug.Log($"{HarmonyId} ERROR: methods not patched");
            //Harmony.DEBUG = false;
        }

        public static void UnpatchAll()
        {
            if (!patched) { Debug.Log($"{HarmonyId} UnpatchAll: not patched!"); return; }
            //Harmony.DEBUG = true;
            var harmony = new Harmony(HarmonyId);
            harmony.UnpatchAll(HarmonyId);
            patched = false;
            //Harmony.DEBUG = false;
        }
    }

    [HarmonyPatch(typeof(BuildingManager))]
    public static class BuildingManager_Patches
    {
        [HarmonyReversePatch, HarmonyPatch("GetAreaIndex")]
        public static int BuildingManager_GetAreaIndex_Reverse(ItemClass.Service service, ItemClass.SubService subService, ItemClass.Level level, int width, int length, BuildingInfo.ZoningMode zoningMode)
        {
            Debug.Log("ERROR: GetVisitBehaviour reverse patch not applied");
            return 0;
        }
    }

    // code generated by ILSpy
    [HarmonyPatch(typeof(PrivateBuildingAI))]
    public static class PrivateBuildingAI_Patches
    {
        [HarmonyPrefix, HarmonyPatch(nameof(PrivateBuildingAI.GetUpgradeInfo))]
        public static bool PrivateBuildingAI_GetUpgradeInfo_Prefix(PrivateBuildingAI __instance, ref BuildingInfo __result, ushort buildingID, ref Building data)
        {
            return true;
        }
    }


    [HarmonyPatch(typeof(ZoneBlock), nameof(ZoneBlock.SimulationStep))]
    public static class ZoneBlock_SimulationStep_Patch
    {
    }

    [HarmonyPatch(typeof(PrivateBuildingAI), nameof(PrivateBuildingAI.SimulationStep))]
    public static class PrivateBuildingAI_SimulationStep_Patch
    {
    }

} // namespace